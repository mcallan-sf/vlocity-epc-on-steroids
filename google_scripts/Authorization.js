/**
 * The function returns URL of the deployed web application. This URL is used to configure a connected application in Salesforce.
 *
 * @return {string} URL of the deployed web application
 *
 * @example
 *
 *     getRedirectUri();
 */

function getRedirectUri() {
    var redirectUri = PropertiesService.getDocumentProperties().getProperty(CONST_WEBAPP_DEPLOYMENT_URL_NAME) + "/auth/callback";

    return redirectUri;
}

/**
 * Persists token information as application property object
 *
 * @param {object} retreiveTokenResponse - SFDC response to retreive access token request (json-object)
 * @return {void} - nothing
 *
 * @example
 *     var token = "00D4J000000EIWs!AR8AQOKkJLSxq7bp8eqnkcfyUC.gKwqM8V_63fF7YvWHO_xWn3HtjQ8qkUfviBoqbjJo05FDQcjeL";
 *     var url = "https://softb.my.salesforce.com";
 *     persistTokenInformation(token, url);
 */

function persistTokenInformation(retreiveTokenResponse) {
    if (retreiveTokenResponse.access_token) PropertiesService.getDocumentProperties().setProperty(CONST_ACCESS_TOKEN_PROPERTY_NAME, retreiveTokenResponse.access_token);
    if (retreiveTokenResponse.refresh_token) PropertiesService.getDocumentProperties().setProperty(CONST_REFRESH_TOKEN_PROPERTY_NAME, retreiveTokenResponse.refresh_token);
    if (retreiveTokenResponse.instance_url) PropertiesService.getDocumentProperties().setProperty(CONST_INSTANCE_URL_PROPERTY_NAME, retreiveTokenResponse.instance_url);
}

/**
 * Erases previously stored access tokens. Used to force re-authorize the application at this moment
 *
 * @return {void} - nothing
 *
 * @example
 *     eraseTokenInformation();
 */

function eraseTokenInformation() {
    PropertiesService.getDocumentProperties().deleteProperty(CONST_ACCESS_TOKEN_PROPERTY_NAME);
    PropertiesService.getDocumentProperties().deleteProperty(CONST_REFRESH_TOKEN_PROPERTY_NAME);
    PropertiesService.getDocumentProperties().deleteProperty(CONST_INSTANCE_URL_PROPERTY_NAME);
}

/**
 * Retrieves previously stored access tokens from the script properties
 * 
 * @return {Object} - a JS object containing both token and corresponding instance URL information
 *
 * @example
 *     var accessToken = retrieveStoredAccessToken()[CONST_ACCESS_TOKEN_PROPERTY_NAME];
 */

function retrieveStoredAccessToken() {
    var accessToken = PropertiesService.getDocumentProperties().getProperty(CONST_ACCESS_TOKEN_PROPERTY_NAME);
    var refreshToken = PropertiesService.getDocumentProperties().getProperty(CONST_REFRESH_TOKEN_PROPERTY_NAME);
    var instanceUrl = PropertiesService.getDocumentProperties().getProperty(CONST_INSTANCE_URL_PROPERTY_NAME);

    if (
        accessToken != null &&
        instanceUrl != null &&
        accessToken != "" &&
        instanceUrl != ""
    ) {
        var obj = {};
        obj[CONST_ACCESS_TOKEN_PROPERTY_NAME] = accessToken;
        obj[CONST_REFRESH_TOKEN_PROPERTY_NAME] = refreshToken;
        obj[CONST_INSTANCE_URL_PROPERTY_NAME] = instanceUrl;

        console.log("Successfully retrieved access token: " + accessToken);
        console.log("Successfully retrieved access instanceUrl: " + instanceUrl);

        return obj;
    } else {
        console.log("Error: Unable to retrieved access token");
        return null;
    }
}

/**
 * Step 2 of the web auth flow. Retrieves an access token from a resource server based 
 * on a previously generated access code. Stores access and refresh tokens to the script properties store
 * 
 * @param {string} authorizationCode - Access code previously generated by a resource server (Salesforce organization)
 * 
 * @return {Object} - a JS object containing both token and corresponding instance URL information
 *
 * @example
 *     var template = HtmlService.createTemplateFromFile('pages/AuthorizationConfirmation');
 *     var retrieveTokenResponse = retrieveTokenByCode(request.parameter.code);
 */

function retrieveTokenByCode(authorizationCode) {
    console.log("*** METHOD_ENTRY: " + arguments.callee.name);

    var authenticationPrefix =
      PropertiesService.getDocumentProperties().getProperty(CONST_ORG_TYPE_PROPERTY_NAME) == "Production" ? "login" : "test";
    var url =
        "https://" +
        authenticationPrefix +
        ".salesforce.com/services/oauth2/token";

    var payload =
        "grant_type=" + 
        "authorization_code" +
        "&" +
        "client_id=" +
        PropertiesService.getDocumentProperties().getProperty(CONST_CUSTOMER_KEY_PROPERTY_NAME) +
        "&" +
        "client_secret=" +
        PropertiesService.getDocumentProperties().getProperty(CONST_CUSTOMER_SECRET_PROPERTY_NAME) +
        "&" +
        "redirect_uri=" +
        getRedirectUri() +
        "&" +
        "code=" +
        authorizationCode +
        "&" +
        "format=" +
        "json";

    var options = {
        method: "post",
        payload: payload,
        muteHttpExceptions: true,
        escaping: false
    };

    
    var request = UrlFetchApp.getRequest(url, options);
    console.log("*** INFO: retreive token request: " + JSON.stringify(request));
    logProgress("Authorization", arguments.callee.name + " request", request);

    var response = UrlFetchApp.fetch(url, options);
    console.log("*** INFO: retreive token response: " + response);
    logProgress("Authorization", arguments.callee.name + " response", response);

    var responseObj = JSON.parse(response);

    if (!responseObj.error) { //check this during testing
        logProgress("Authorization", arguments.callee.name, "Token refresh process is successful");

        console.log("*** VARIABLE: " + "response.access_token: " + responseObj.access_token);
        console.log("*** VARIABLE: " + "response.refresh_token: " + responseObj.refresh_token);
        console.log("*** VARIABLE: " + "response.instance_url: " + responseObj.instance_url);
        
        persistTokenInformation(responseObj);
        
    } else {
        logProgress("Authorization", arguments.callee.name, "Token refresh process is not successful");
        logProgress("Authorization", arguments.callee.name + " response.error_description", response.error_description);

        console.log("*** VARIABLE: " + "response.error_description: " + responseObj.error_description);

        eraseTokenInformation();
    }

    console.log("*** METHOD_EXIT: " + arguments.callee.name);
    return responseObj;
}

/**
 * Resreshes an access token from a resource server if a session expired. Reference documentation from Salesforce 
 * is available at https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/intro_understanding_refresh_token_oauth.htm
 * 
 * @param {string} refreshToken - a refresh token previously generated by a resource server (Salesforce organization)
 * 
 * @return {Object} - a JS object containing both token and corresponding instance URL information
 *
 * @example
 *     var refreshToken = PropertiesService.getDocumentProperties().getProperty(CONST_REFRESH_TOKEN_PROPERTY_NAME);
 *     var tokenResponse = regenerateToken(refreshToken);
 */

function regenerateToken(refreshToken) {
    console.log("*** METHOD_ENTRY: " + arguments.callee.name);

    var authenticationPrefix =
      PropertiesService.getDocumentProperties().getProperty(CONST_ORG_TYPE_PROPERTY_NAME) == "Production" ? "login" : "test";
    var url =
        "https://" +
        authenticationPrefix +
        ".salesforce.com/services/oauth2/token";

    var payload =
        "grant_type=" + 
        "refresh_token" +
        "&" +
        "refresh_token=" + 
        refreshToken + 
        "&" + 
        "client_id=" +
        PropertiesService.getDocumentProperties().getProperty(CONST_CUSTOMER_KEY_PROPERTY_NAME) +
        "&" +
        "client_secret=" +
        PropertiesService.getDocumentProperties().getProperty(CONST_CUSTOMER_SECRET_PROPERTY_NAME) +
        "&" +
        "format=" +
        "json";

    var options = {
        method: "post",
        payload: payload,
        muteHttpExceptions: true,
        escaping: false
    };

    
    var request = JSON.stringify(UrlFetchApp.getRequest(url, options));
    console.log("*** INFO: refresh token request: " + request);
    logProgress("Authorization", arguments.callee.name + " request", request);

    var response = UrlFetchApp.fetch(url, options);
    console.log("*** INFO: refresh token response: " + response);
    logProgress("Authorization", arguments.callee.name + " response", response);

    var responseObj = JSON.parse(response);

    if (!responseObj.error) {
        logProgress("Authorization", arguments.callee.name, "Token refresh process is successful");

        console.log("*** VARIABLE: " + "response.access_token: " + responseObj.access_token);
        console.log("*** VARIABLE: " + "response.signature: " + responseObj.signature);
        console.log("*** VARIABLE: " + "response.instance_url: " + responseObj.instance_url);
        
        persistTokenInformation(responseObj);
        
    } else {
        logProgress("Authorization", arguments.callee.name, "Token refresh process is not successful");
        logProgress("Authorization", arguments.callee.name + " response.error_description", response.error_description);
        
    }

    console.log("*** METHOD_EXIT: " + arguments.callee.name);
    return responseObj;
}